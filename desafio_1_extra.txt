## OPÇÕES DE MELHORIA 
# OPÇÃO 1
def opcao_de_melhoria_reducao_rgba_rgb(mag_nam='meteor_challenge_01.png'):
    png = im.open(mag_nam)
    png.load() # required for png.split()
    
    background = im.new("RGB", png.size, (255, 255, 255))
    background.paste(png, mask=png.split()[3]) # 3 is the alpha channel
    
    background.save('foo.jpg', 'JPEG', quality=100)
    
    by_li = dic(int)
    for pix_ in background.getdata():
         by_li[pix_] += 1
    return background,by_li

#




# Funções sem função atual
def cut(im_,w_,h_,ws_=0,hs_=0): #corta um pedaço da imagem definido
    new_im_ = im.new("RGB", (w_, h_))
    
    for x_ in range(ws_,w_):
        for y_ in range(hs_,h_):
            pix = im_.getpixel((x_,y_))
            new_im_.putpixel((x_,y_),pix)
            #print(pix)
    return new_im_
    


# ===================================================================
# Python program to implement Morse Code Translator
# ===================================================================
  
'''
VARIABLE KEY
'cipher' -> 'stores the morse translated form of the english string'
'decipher' -> 'stores the english translated form of the morse string'
'citext' -> 'stores morse code of a single character'
'i' -> 'keeps count of the spaces between morse characters'
'message' -> 'stores the string to be encoded or decoded'
'''
  
# Dictionary representing the morse code chart
MORSE_CODE_DICT = { 'A':'.-', 'B':'-...',
                    'C':'-.-.', 'D':'-..', 'E':'.',
                    'F':'..-.', 'G':'--.', 'H':'....',
                    'I':'..', 'J':'.---', 'K':'-.-',
                    'L':'.-..', 'M':'--', 'N':'-.',
                    'O':'---', 'P':'.--.', 'Q':'--.-',
                    'R':'.-.', 'S':'...', 'T':'-',
                    'U':'..-', 'V':'...-', 'W':'.--',
                    'X':'-..-', 'Y':'-.--', 'Z':'--..',
                    '1':'.----', '2':'..---', '3':'...--',
                    '4':'....-', '5':'.....', '6':'-....',
                    '7':'--...', '8':'---..', '9':'----.',
                    '0':'-----', ', ':'--..--', '.':'.-.-.-',
                    '?':'..--..', '/':'-..-.', '-':'-....-',
                    '(':'-.--.', ')':'-.--.-'}

# Function to encrypt the string
# according to the morse code chart
def encrypt(message):
    cipher = ''
    for letter in message:
        if letter != ' ':
  
            # Looks up the dictionary and adds the
            # correspponding morse code
            # along with a space to separate
            # morse codes for different characters
            cipher += MORSE_CODE_DICT[letter] + ' '
        else:
            # 1 space indicates different characters
            # and 2 indicates different words
            cipher += ' '
  
    return cipher
  
# Function to decrypt the string
# from morse to english
def decrypt(message):
  
    # extra space added at the end to access the
    # last morse code
    message += ' '
  
    decipher = ''
    citext = ''
    for letter in message:
  
        # checks for space
        if (letter != ' '):
  
            # counter to keep track of space
            i = 0
  
            # storing morse code of a single character
            citext += letter
  
        # in case of space
        else:
            # if i = 1 that indicates a new character
            i += 1
  
            # if i = 2 that indicates a new word
            if i == 2 :
  
                 # adding space to separate words
                decipher += ' '
            else:
  
                # accessing the keys using their values (reverse of encryption)
                decipher += list(MORSE_CODE_DICT.keys())[list(MORSE_CODE_DICT
                .values()).index(citext)]
                citext = ''
  
    return decipher
  
message = "GEEKS-FOR-GEEKS"
result = encrypt(message.upper())
print (result)

message = "--. . . -.- ... -....- ..-. --- .-. -....- --. . . -.- ... "
result = decrypt(message)
print (result)
  